
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.celeritate.jql.syntactic;

import java_cup.runtime.*;
import com.celeritate.jql.lexic.Token;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JQLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public JQLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JQLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JQLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\005\000\002\004" +
    "\004\000\002\034\005\000\002\034\002\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\005\013\000\002\006\007\000\002\007\005\000\002\010" +
    "\007\000\002\011\007\000\002\012\007\000\002\013\007" +
    "\000\002\014\005\000\002\015\003\000\002\015\005\000" +
    "\002\016\003\000\002\016\005\000\002\017\006\000\002" +
    "\017\004\000\002\020\003\000\002\021\003\000\002\021" +
    "\011\000\002\021\011\000\002\021\007\000\002\021\007" +
    "\000\002\022\003\000\002\022\005\000\002\023\005\000" +
    "\002\024\005\000\002\025\003\000\002\025\003\000\002" +
    "\026\003\000\002\027\007\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\032\003\000\002\032" +
    "\005\000\002\033\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\004\004\004\001\002\000\004\012\011\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\005\202\001\002\000\006\005\ufffd\011\025\001" +
    "\002\000\004\010\012\001\002\000\004\004\013\001\002" +
    "\000\004\025\014\001\002\000\004\010\015\001\002\000" +
    "\004\006\016\001\002\000\004\042\020\001\002\000\004" +
    "\007\023\001\002\000\006\007\uffed\011\021\001\002\000" +
    "\004\042\020\001\002\000\004\007\uffec\001\002\000\004" +
    "\005\024\001\002\000\006\005\ufff5\011\ufff5\001\002\000" +
    "\020\013\042\014\030\015\045\016\043\017\033\020\041" +
    "\026\031\001\002\000\004\005\uffff\001\002\000\006\005" +
    "\ufff8\011\ufff8\001\002\000\004\010\200\001\002\000\004" +
    "\010\174\001\002\000\006\005\ufffd\011\025\001\002\000" +
    "\004\010\167\001\002\000\006\005\ufff6\011\ufff6\001\002" +
    "\000\006\005\ufff9\011\ufff9\001\002\000\006\005\ufffb\011" +
    "\ufffb\001\002\000\006\005\ufffa\011\ufffa\001\002\000\006" +
    "\005\ufffc\011\ufffc\001\002\000\004\010\106\001\002\000" +
    "\004\010\102\001\002\000\004\010\063\001\002\000\006" +
    "\005\ufff7\011\ufff7\001\002\000\004\010\046\001\002\000" +
    "\004\006\047\001\002\000\006\004\050\040\051\001\002" +
    "\000\004\042\060\001\002\000\004\005\057\001\002\000" +
    "\006\007\uffeb\011\055\001\002\000\004\007\054\001\002" +
    "\000\006\005\ufff2\011\ufff2\001\002\000\006\004\050\040" +
    "\051\001\002\000\004\007\uffea\001\002\000\006\007\uffe8" +
    "\011\uffe8\001\002\000\004\010\061\001\002\000\004\037" +
    "\062\001\002\000\006\007\uffe9\011\uffe9\001\002\000\004" +
    "\004\064\001\002\000\004\042\066\001\002\000\004\005" +
    "\101\001\002\000\004\010\072\001\002\000\006\005\uffcc" +
    "\011\070\001\002\000\004\042\066\001\002\000\004\005" +
    "\uffcb\001\002\000\014\042\100\043\074\044\076\045\073" +
    "\046\075\001\002\000\006\005\uffce\011\uffce\001\002\000" +
    "\006\005\uffd0\011\uffd0\001\002\000\006\005\uffcd\011\uffcd" +
    "\001\002\000\006\005\uffcf\011\uffcf\001\002\000\006\005" +
    "\uffca\011\uffca\001\002\000\006\005\uffd1\011\uffd1\001\002" +
    "\000\006\005\ufff0\011\ufff0\001\002\000\004\006\103\001" +
    "\002\000\004\042\020\001\002\000\004\007\105\001\002" +
    "\000\006\005\ufff4\011\ufff4\001\002\000\004\004\107\001" +
    "\002\000\014\021\115\022\120\023\114\024\116\042\117" +
    "\001\002\000\010\005\uffe6\007\uffe6\011\uffe6\001\002\000" +
    "\006\005\uffe7\011\uffe7\001\002\000\006\005\uffee\011\uffee" +
    "\001\002\000\004\005\166\001\002\000\004\010\163\001" +
    "\002\000\004\010\156\001\002\000\004\010\153\001\002" +
    "\000\004\010\131\001\002\000\004\010\121\001\002\000" +
    "\004\006\122\001\002\000\004\004\107\001\002\000\004" +
    "\007\127\001\002\000\006\007\uffe1\011\125\001\002\000" +
    "\004\004\107\001\002\000\004\007\uffe0\001\002\000\004" +
    "\005\130\001\002\000\010\005\uffe4\007\uffe4\011\uffe4\001" +
    "\002\000\016\004\132\042\100\043\074\044\076\045\073" +
    "\046\075\001\002\000\022\027\143\030\145\031\146\032" +
    "\144\033\142\034\140\035\147\036\141\001\002\000\004" +
    "\005\uffdc\001\002\000\004\005\uffdd\001\002\000\004\005" +
    "\uffdb\001\002\000\004\005\uffde\001\002\000\004\010\150" +
    "\001\002\000\004\010\uffd4\001\002\000\004\010\uffd2\001" +
    "\002\000\004\010\uffd5\001\002\000\004\010\uffd9\001\002" +
    "\000\004\010\uffd6\001\002\000\004\010\uffd8\001\002\000" +
    "\004\010\uffd7\001\002\000\004\010\uffd3\001\002\000\014" +
    "\042\100\043\074\044\076\045\073\046\075\001\002\000" +
    "\004\005\152\001\002\000\004\005\uffda\001\002\000\004" +
    "\004\107\001\002\000\004\005\155\001\002\000\010\005" +
    "\uffe2\007\uffe2\011\uffe2\001\002\000\004\006\157\001\002" +
    "\000\004\004\107\001\002\000\004\007\161\001\002\000" +
    "\004\005\162\001\002\000\010\005\uffe5\007\uffe5\011\uffe5" +
    "\001\002\000\004\004\107\001\002\000\004\005\165\001" +
    "\002\000\010\005\uffe3\007\uffe3\011\uffe3\001\002\000\010" +
    "\005\uffdf\007\uffdf\011\uffdf\001\002\000\004\004\170\001" +
    "\002\000\004\042\066\001\002\000\004\005\172\001\002" +
    "\000\006\005\uffef\011\uffef\001\002\000\004\005\ufffe\001" +
    "\002\000\004\006\175\001\002\000\004\042\020\001\002" +
    "\000\004\007\177\001\002\000\006\005\ufff1\011\ufff1\001" +
    "\002\000\004\004\107\001\002\000\006\005\ufff3\011\ufff3" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\004\002\004\001\001\000\006\004\006\005" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\031\006" +
    "\037\007\035\010\036\011\033\012\034\013\026\014\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\052\017\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\055" +
    "\017\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\064\033\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\032\070" +
    "\033\066\001\001\000\002\001\001\000\004\031\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\111\021" +
    "\110\023\107\001\001\000\004\024\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\021\123\022\122\023\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\021\123\022\125\023\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\135\026\133\027\132\031\134\001\001\000" +
    "\004\030\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\153\023\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\021\123\022\157\023\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\163" +
    "\023\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\032\170\033\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\200\021\110\023" +
    "\107\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JQLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JQLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JQLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return this.getScanner().next_token();

    }


    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error ");
        if (info instanceof java_cup.runtime.Symbol) {
            m.append("(" + info.toString() + ")");
        }
        m.append(" : " + message);
        System.out.println(m);
    }
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal Syntax Error");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JQLParser$actions {
  private final JQLParser parser;

  /** Constructor */
  CUP$JQLParser$actions(JQLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JQLParser$do_action_part00000000(
    int                        CUP$JQLParser$act_num,
    java_cup.runtime.lr_parser CUP$JQLParser$parser,
    java.util.Stack            CUP$JQLParser$stack,
    int                        CUP$JQLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JQLParser$result;

      /* select the action based on the action number */
      switch (CUP$JQLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= query EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-1)).value;
		RESULT = start_val;
              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JQLParser$parser.done_parsing();
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // query ::= LBRACE query_fields RBRACE 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("query",0, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // query_fields ::= using_field query_field_list 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("query_fields",2, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // query_field_list ::= COMMA query_field query_field_list 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("query_field_list",26, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // query_field_list ::= 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("query_field_list",26, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // query_field ::= select_field 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("query_field",1, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // query_field ::= where_field 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("query_field",1, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // query_field ::= order_by_field 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("query_field",1, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // query_field ::= insert_field 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("query_field",1, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // query_field ::= update_field 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("query_field",1, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // query_field ::= delete_field 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("query_field",1, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // query_field ::= group_by_field 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("query_field",1, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // using_field ::= USING COLON LBRACE TABLES COLON LSQBRACE string_list RSQBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("using_field",3, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-8)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // select_field ::= SELECT COLON LSQBRACE string_list RSQBRACE 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("select_field",4, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-4)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // where_field ::= WHERE COLON condition 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("where_field",5, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // order_by_field ::= ORDERBY COLON LSQBRACE order_by_list RSQBRACE 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("order_by_field",6, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-4)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // group_by_field ::= GROUPBY COLON LSQBRACE string_list RSQBRACE 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("group_by_field",7, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-4)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // insert_field ::= INSERT COLON LBRACE key_value_pairs RBRACE 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("insert_field",8, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-4)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // update_field ::= UPDATE COLON LBRACE key_value_pairs RBRACE 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("update_field",9, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-4)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // delete_field ::= DELETE COLON condition 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("delete_field",10, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // string_list ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("string_list",11, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // string_list ::= STRING_LITERAL COMMA string_list 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("string_list",11, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // order_by_list ::= order_by_item 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("order_by_list",12, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // order_by_list ::= order_by_item COMMA order_by_list 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("order_by_list",12, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // order_by_item ::= LBRACE STRING_LITERAL COLON ASC 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("order_by_item",13, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // order_by_item ::= DESC RBRACE 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("order_by_item",13, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condition ::= logical_expression 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // logical_expression ::= atomic_condition 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("logical_expression",15, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // logical_expression ::= LBRACE AND COLON LSQBRACE logical_expression_list RSQBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("logical_expression",15, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-6)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // logical_expression ::= LBRACE OR COLON LSQBRACE logical_expression_list RSQBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("logical_expression",15, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-6)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // logical_expression ::= LBRACE NOT COLON logical_expression RBRACE 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("logical_expression",15, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-4)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // logical_expression ::= LBRACE GROUP COLON logical_expression RBRACE 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("logical_expression",15, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-4)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // logical_expression_list ::= logical_expression 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("logical_expression_list",16, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // logical_expression_list ::= logical_expression COMMA logical_expression_list 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("logical_expression_list",16, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // atomic_condition ::= LBRACE condition_item RBRACE 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("atomic_condition",17, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condition_item ::= STRING_LITERAL COLON condition_value 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("condition_item",18, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condition_value ::= equality_value 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("condition_value",19, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condition_value ::= operator_value 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("condition_value",19, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // equality_value ::= value 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("equality_value",20, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operator_value ::= LBRACE operator COLON value RBRACE 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("operator_value",21, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-4)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operator ::= EQ 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("operator",22, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operator ::= NE 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("operator",22, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operator ::= LT 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("operator",22, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operator ::= GT 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("operator",22, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operator ::= LTE 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("operator",22, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operator ::= GTE 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("operator",22, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operator ::= LIKE 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("operator",22, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operator ::= IN 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("operator",22, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // value ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("value",23, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // value ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("value",23, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // value ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("value",23, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value ::= DOUBLE_LITERAL 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("value",23, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("value",23, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // key_value_pairs ::= string_value_pair 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("key_value_pairs",24, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // key_value_pairs ::= string_value_pair COMMA key_value_pairs 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("key_value_pairs",24, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // string_value_pair ::= STRING_LITERAL COLON value 
            {
              Object RESULT =null;

              CUP$JQLParser$result = parser.getSymbolFactory().newSymbol("string_value_pair",25, ((java_cup.runtime.Symbol)CUP$JQLParser$stack.elementAt(CUP$JQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JQLParser$stack.peek()), RESULT);
            }
          return CUP$JQLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JQLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JQLParser$do_action(
    int                        CUP$JQLParser$act_num,
    java_cup.runtime.lr_parser CUP$JQLParser$parser,
    java.util.Stack            CUP$JQLParser$stack,
    int                        CUP$JQLParser$top)
    throws java.lang.Exception
    {
              return CUP$JQLParser$do_action_part00000000(
                               CUP$JQLParser$act_num,
                               CUP$JQLParser$parser,
                               CUP$JQLParser$stack,
                               CUP$JQLParser$top);
    }
}

}
